let sqlServers = resources
| where type == "microsoft.sql/servers"
| extend props = parse_json(properties)
| project
    serverName = name,
    location,
    subscriptionId,
    resourceGroup,
    identityType = tostring(identity.type),
    minimalTlsVersion = tostring(props.minimalTlsVersion),
    publicNetworkAccess = tostring(props.publicNetworkAccess),
    administratorLogin = tostring(props.administratorLogin),
    TLSVersionCheck = iff(minimalTlsVersion == "1.0" or isempty(minimalTlsVersion), "TLS 1.0 or not set", "OK"),
    PublicAccessCheck = iff(publicNetworkAccess == "Enabled", "Public access enabled", "OK"),
    IdentityCheck = iff(isempty(identityType) or identityType == "None", "No managed identity", "OK");

// Firewall rules
let firewallFindings = resources
| where type == "microsoft.sql/servers/firewallrules"
| extend props = parse_json(properties)
| extend
    startIp = tostring(props.startIpAddress),
    endIp = tostring(props.endIpAddress),
    serverName = tostring(split(id, '/')[8]),
    FirewallOpenToAll = case(
        startIp == "0.0.0.0" and endIp == "255.255.255.255", "Open to all IPs",
        startIp == "0.0.0.0" and endIp == "0.0.0.0", "Allow Azure services (0.0.0.0)",
        isempty(startIp) or isempty(endIp), "Missing IPs",
        "OK"
    )
| summarize FirewallOpenToAll = any(FirewallOpenToAll) by serverName;

// Final join
sqlServers
| join kind=leftouter firewallFindings on serverName
| project
    serverName,
    location,
    subscriptionId,
    resourceGroup,
    administratorLogin,
    TLSVersionCheck,
    PublicAccessCheck,
    IdentityCheck,
    FirewallOpenToAll = coalesce(FirewallOpenToAll, "No firewall rule information")
| order by serverName asc
