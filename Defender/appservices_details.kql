let defenderInfo = securityresources
| where type == "microsoft.security/pricings"
| where name == "AppServices"
| project subscriptionId, defenderStatus = tostring(properties.pricingTier);

resources
| where type in~ ("microsoft.web/sites", "microsoft.web/serverfarms")
| extend
    isSite = type == "microsoft.web/sites",
    isPlan = type == "microsoft.web/serverfarms",
    siteName = iff(isSite, name, ""),
    planId = iff(isSite, tostring(properties.serverFarmId), id),
    runtimeStack = iff(isSite, tostring(properties.siteConfig.linuxFxVersion), ""),
    skuTier = iff(isPlan, tostring(sku.tier), ""),
    skuName = iff(isPlan, tostring(sku.name), "")
| summarize
    siteName = make_list(siteName),
    runtimeStack = make_list(runtimeStack),
    skuTier = make_list(skuTier),
    skuName = make_list(skuName)
    by subscriptionId, planId
| mv-expand siteName to typeof(string), runtimeStack to typeof(string), skuTier to typeof(string), skuName to typeof(string)
| join kind=leftouter (defenderInfo) on subscriptionId
| join kind=inner (
    resourcecontainers
    | where type == "microsoft.resources/subscriptions"
    | project subscriptionId, subscriptionName = name
) on subscriptionId
| project
    subscriptionName,
    siteName,
    runtimeStack = iff(runtimeStack == "", "<Unknown>", runtimeStack),
    skuTier = iff(skuTier == "", "<Unknown>", skuTier),
    skuName = iff(skuName == "", "<Unknown>", skuName),
    defenderStatus = case(
        defenderStatus =~ "Standard", "Enabled",
        defenderStatus =~ "Free", "Disabled",
        "NotConfigured"
    )
| order by subscriptionName, siteName
